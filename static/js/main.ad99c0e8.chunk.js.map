{"version":3,"sources":["components/HeaderComponent/Header.js","components/SearchComponent/Search.js","components/EmployeeContainerComponent/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["header","className","search","props","onChange","handleEmailChange","name","type","placeholder","value","emailSearch","handleDeptChange","aria-label","deptSearch","EmployeeContainer","state","employees","event","preventDefault","console","log","target","setState","this","handleSearchbyDept","handleSearchbyEmail","scope","map","employee","alt","firstName","src","picture","lastName","email","phone","department","manager","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"miFAEe,SAASA,IACtB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,gCACb,0BAAMA,UAAU,wBAAhB,wB,MCHO,SAASC,EAAOC,GAC7B,OACE,yBAAKF,UAAU,aACb,0BAAMA,UAAU,QACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,2BACEG,SAAUD,EAAME,kBAChBJ,UAAU,uBACVK,KAAK,cACLC,KAAK,SACLC,YAAY,kBACZC,MAAON,EAAMO,eAGjB,yBAAKT,UAAU,SACb,4BAAQM,KAAK,SAASN,UAAU,mBAAhC,WAIF,yBAAKA,UAAU,SACb,2BACEG,SAAUD,EAAMQ,iBAChBV,UAAU,uBACVK,KAAK,cACLC,KAAK,SACLC,YAAY,uBACZI,aAAW,YAGf,yBAAKX,UAAU,SACb,4BACEM,KAAK,SACLN,UAAU,kBACVQ,MAAON,EAAMU,YAHf,c,WC7BSC,E,4MACnBC,MAAQ,CACNC,YACAH,WAAY,GACZH,YAAa,I,EAGfC,iBAAmB,SAACM,GAClBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOf,O,EAG3BD,kBAAoB,SAACY,GACnB,IAAMX,EAAOW,EAAMI,OAAOf,KACpBG,EAAQQ,EAAMI,OAAOZ,MAC3B,EAAKa,SAAL,eACKhB,EAAOG,IAEZU,QAAQC,IAAIX,I,uDAIZ,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAP,OAAQqB,KAAKR,MAAMb,OACnBsB,mBAAoBD,KAAKC,mBACzBC,oBAAqBF,KAAKE,sBAE1B,yBAAKxB,UAAU,aACb,iDACA,2BAAOA,UAAU,SACf,2BAAOA,UAAU,cACf,4BACE,wBAAIyB,MAAM,OAAV,OACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aAGJ,+BACGH,KAAKR,MAAMC,UAAUW,KAAI,SAACC,GAAD,OACxB,4BACE,4BACE,yBAAKC,IAAKD,EAASE,UAAWC,IAAKH,EAASI,WAE9C,4BAAKJ,EAASE,WACd,4BAAKF,EAASK,UACd,4BAAKL,EAASM,OACd,4BAAKN,EAASO,OACd,4BAAKP,EAASQ,YACd,4BAAKR,EAASS,qB,GAvDeC,aCOhCC,MARf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCKcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.ad99c0e8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function header() {\n  return (\n    <div className='continer-fluid'>\n      <nav className='navbar navbar-light bg-light'>\n        <span className='navbar-brand mb-0 h1'>Employee Directory</span>\n      </nav>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Search.css';\n\nexport default function search(props) {\n  return (\n    <div className='container'>\n      <form className='form'>\n        <div className='row'>\n          <div className='col-4'>\n            <input\n              onChange={props.handleEmailChange}\n              className='form-control mr-lg-2'\n              name='emailSearch'\n              type='search'\n              placeholder='Search by Email'\n              value={props.emailSearch}\n            />\n          </div>\n          <div className='col-2'>\n            <button type='button' className='btn btn-primary'>\n              Search\n            </button>\n          </div>\n          <div className='col-4'>\n            <input\n              onChange={props.handleDeptChange}\n              className='form-control mr-lg-2'\n              name='emailSearch'\n              type='search'\n              placeholder='Search by Department'\n              aria-label='Search'\n            />\n          </div>\n          <div className='col-2'>\n            <button\n              type='button'\n              className='btn btn-primary'\n              value={props.deptSearch}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Header from '../HeaderComponent/Header';\nimport Search from '../SearchComponent/Search';\nimport employees from '../../utils/employee.json';\n\nexport default class EmployeeContainer extends Component {\n  state = {\n    employees,\n    deptSearch: '',\n    emailSearch: ''\n  };\n\n  handleDeptChange = (event) => {\n    event.preventDefault();\n    console.log(event.target.name);\n  };\n\n  handleEmailChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n        [name]: value\n    })\n    console.log(value)\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Search \n        search={this.state.search}\n        handleSearchbyDept={this.handleSearchbyDept}\n        handleSearchbyEmail={this.handleSearchbyEmail}\n        />\n        <div className='jumbotron'>\n          <h3>List of Employees</h3>\n          <table className='table'>\n            <thead className='thead-dark'>\n              <tr>\n                <th scope='col'>Pic</th>\n                <th scope='col'>FirstName</th>\n                <th scope='col'>LastName</th>\n                <th scope='col'>Email</th>\n                <th scope='col'>PhoneNumber</th>\n                <th scope='col'>Department</th>\n                <th scope='col'>Manager</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.employees.map((employee) => (\n                <tr>\n                  <td>\n                    <img alt={employee.firstName} src={employee.picture} />\n                  </td>\n                  <td>{employee.firstName}</td>\n                  <td>{employee.lastName}</td>\n                  <td>{employee.email}</td>\n                  <td>{employee.phone}</td>\n                  <td>{employee.department}</td>\n                  <td>{employee.manager}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport EmployeeContainer from './components/EmployeeContainerComponent/EmployeeContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EmployeeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}