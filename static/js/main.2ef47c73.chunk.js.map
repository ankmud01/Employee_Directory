{"version":3,"sources":["components/HeaderComponent/Header.js","components/SearchComponent/Search.js","components/EmployeeTableComponent/employeetable.js","components/EmployeeContainerComponent/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["header","className","search","props","onChange","handleEmailSearch","name","type","placeholder","value","handleDeptSearch","employeetable","scope","onClick","sortByFirstname","sortByLastname","employees","map","employee","key","firstName","alt","src","picture","lastName","email","phone","department","manager","EmployeeContainer","state","searchEmployees","sort","event","target","filter","toLowerCase","includes","setState","console","log","handleFirstNameSort","myEmployees","sortEmployee","a","b","handleLastNameSort","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ef47c73.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default function header() {\n  return (\n    <div className='continer-fluid title'>\n      <nav className='navbar navbar-light bg-light'>\n        <span className='navbar-brand'>Employee Directory</span>\n      </nav>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Search.css';\n\nexport default function search(props) {\n  return (\n    <div className='container'>\n      <form className='form'>\n        <div className='row'>\n          <div className='col-6'>\n            <input\n              onChange={props.handleEmailSearch}\n              className='form-control mr-lg-2'\n              name='emailSearch'\n              type='search'\n              placeholder='Search by Email'\n              value={props.value}\n            />\n          </div>\n          <div className='col-6'>\n            <input\n              onChange={props.handleDeptSearch}\n              className='form-control mr-lg-2'\n              name='deptSearch'\n              type='search'\n              placeholder='Search by Department'\n              value={props.value}\n            />\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\nimport './employeetable.css';\n\nexport default function employeetable(props) {\n  return (\n    <div>\n        <h3>List of Employees</h3>\n        <table className='table'>\n          <thead className='thead-dark'>\n            <tr>\n              <th scope='col'>Pic</th>\n              <th scope='col' onClick={props.sortByFirstname} ><i className=\"material-icons\">swap_vert</i>FirstName</th>\n              <th scope='col' onClick={props.sortByLastname}><i className='material-icons'>swap_vert</i>LastName</th>\n              <th scope='col'>Email</th>\n              <th scope='col'>PhoneNumber</th>\n              <th scope='col'>Department</th>\n              <th scope='col'>Manager</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.employees.map(employee => (\n              <tr key={employee.firstName}>\n                <td>\n                  <img alt={employee.firstName} src={employee.picture} />\n                </td>\n                <td>{employee.firstName}</td>\n                <td>{employee.lastName}</td>\n                <td>{employee.email}</td>\n                <td>{employee.phone}</td>\n                <td>{employee.department}</td>\n                <td>{employee.manager}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Header from '../HeaderComponent/Header';\nimport Search from '../SearchComponent/Search';\nimport employees from '../../utils/employee.json';\nimport EmployeeTable from '../EmployeeTableComponent/employeetable';\n\nexport default class EmployeeContainer extends Component {\n  state = {\n    employees,\n    searchEmployees: [],\n    sort: '',\n  };\n\n  componentDidMount() {\n    this.setState({\n      searchEmployees: [...employees],\n    });\n  }\n\n  handleDeptSearch = (event) => {\n    let value = event.target.value;\n    const myEmployees = [...employees];\n    // console.log(myEmployees);\n\n    let searchEmployees = myEmployees.filter((employee) =>\n      employee.department.toLowerCase().includes(value.toLowerCase())\n    );\n\n    this.setState(\n      {\n        ...this.state,\n        searchEmployees,\n      },\n      console.log('State', this.state)\n    );\n  };\n\n  handleEmailSearch = (event) => {\n    let value = event.target.value;\n    const myEmployees = [...employees];\n    // console.log(myEmployees);\n\n    let searchEmployees = myEmployees.filter((employee) =>\n      employee.email.toLowerCase().includes(value.toLowerCase())\n    );\n\n    this.setState(\n      {\n        ...this.state,\n        searchEmployees,\n      },\n      console.log('State', this.state)\n    );\n  };\n\n  handleFirstNameSort = () => {\n    // console.log('I should sort by first name');\n    const myEmployees = this.state.employees;\n    if(this.state.sort === 'asc'){\n        const sortEmployee = myEmployees.sort((a, b) =>\n        a.firstName.toLowerCase() > b.firstName.toLowerCase() ? 1 : -1\n      );\n      this.setState({\n        searchEmployees: sortEmployee,\n        sort: 'desc',\n      });\n    }else{\n        const sortEmployee = myEmployees.sort((a, b) =>\n        a.firstName.toLowerCase() < b.firstName.toLowerCase() ? 1 : -1\n      );\n      this.setState({\n        searchEmployees: sortEmployee,\n        sort: 'asc',\n      });\n    }\n  };\n\n  handleLastNameSort = () => {\n    // console.log('I should sort by last name');\n    const myEmployees = this.state.employees;\n    if(this.state.sort === 'asc'){\n        const sortEmployee = myEmployees.sort((a, b) =>\n        a.lastName.toLowerCase() > b.lastName.toLowerCase() ? 1 : -1\n      );\n      this.setState({\n        searchEmployees: sortEmployee,\n        sort: 'desc',\n      });\n    }else{\n        const sortEmployee = myEmployees.sort((a, b) =>\n        a.lastName.toLowerCase() < b.lastName.toLowerCase() ? 1 : -1\n      );\n      this.setState({\n        searchEmployees: sortEmployee,\n        sort: 'asc',\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Search\n          handleEmailSearch={this.handleEmailSearch}\n          handleDeptSearch={this.handleDeptSearch}\n        />\n        <div className='jumbotron'>\n          <EmployeeTable\n            employees={this.state.searchEmployees}\n            sortByFirstname={this.handleFirstNameSort}\n            sortByLastname={this.handleLastNameSort}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport EmployeeContainer from './components/EmployeeContainerComponent/EmployeeContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EmployeeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}